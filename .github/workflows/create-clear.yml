#
# 需要用REPO_TOKEN密匙
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#


name: 创建和清理
on:
  workflow_dispatch:
    inputs:
      Establish:
        description: '以[devices]为蓝本,创建其他机型文件夹(勾选为执行)'
        required: false
        default: 'false'
        type: boolean
      establish_name:
        description: '请输入您需要创建的文件夹名称'
        required: false
        default: ''
      Delete_workflow:
        description: '清理[X]分钟之前的Artifacts（勾选为执行）'
        required: false
        default: 'false'
        type: boolean
      RETAIN_MINUTE:
        description: '请修改清理[X]分钟之前的Artifacts数值(最低可以填10)'
        required: true
        default: '10080'
      Delete_releases:
        description: '保留[X]个Releases不被删除（勾选为执行）'
        required: false
        default: 'false'
        type: boolean
      KEEP_LATEST:
        description: '请修改保留[X]个Releases不被删除数值'
        required: true
        default: '10'

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}

jobs:
  del_runs:
    runs-on: Ubuntu-22.04
    name: 创建和清理
    
    steps:
    - name: 密匙检测（密匙为空则退出）
      run: |
        if [[ -z "${{ secrets.REPO_TOKEN }}" ]]; then
          echo "您没有设置仓库密匙，请按教程设置好密匙再来"
          echo "REPO_TOKEN密匙制作教程：https://git.io/jm.md"
          exit 1
        fi
    
    - name: 准备结束
      uses: actions/checkout@v3
      
    - name: 部署环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update > /dev/null 2>&1
        sudo -E apt-get -qq install -y git subversion git-core wget curl grep
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        sudo timedatectl set-timezone "Asia/Shanghai"
          
    - name: 创建文件夹
      if: env.REPO_TOKEN  && github.event.inputs.Establish == 'true'
      run: |
        cd $GITHUB_WORKSPACE
        git clone -b main https://github.com/281677160/actions-openwrt shangyou
        git clone -b main https://github.com/${{github.repository}} repogx
        if [[ -z "${{ inputs.establish_name }}" ]]; then
          echo "文件夹名称为空，无法创建文件夹"
          exit 1
        elif [[ -d "repogx/build/${{ inputs.establish_name }}" ]]; then
          echo "${{ inputs.establish_name }}已存在，无法继续创建"
          exit 1
        else
          cp -Rf shangyou/build/devices repogx/build/${{ inputs.establish_name }}
          cp -Rf .github/workflows/build-openwrt.yml repogx/.github/workflows/${{ inputs.establish_name }}.yml
          export X="repogx/.github/workflows/${{ inputs.establish_name }}.yml"
          export FOLDER_NE1="target: \\[.*\\]"
          export FOLDER_NE2="target: \\[${{ inputs.establish_name }}\\]"
          sed -i "s?${FOLDER_NE1}?${FOLDER_NE2}?g" "${X}"
          export yml_name1="$(grep 'name:' "${X}" |sed 's/^[ ]*//g' |grep -v '^#\|^-' |awk 'NR==1')"
          export yml_name2="name: ${{ inputs.establish_name }}"
          sed -i "s?${yml_name1}?${yml_name2}?g" "${X}"
        fi
        cd $GITHUB_WORKSPACE
        chmod -R 775 repogx
        cd repogx
        git add .
        git commit -m "up"
        git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
        if [[ $? -ne 0 ]];then
          echo "创建${{ inputs.establish_name }}文件夹失败"
          exit 1
        else
          echo "创建${{ inputs.establish_name }}文件夹完成"
        fi
        
    - name: 清理Actions空间
      continue-on-error: true
      if: env.REPO_TOKEN  && github.event.inputs.Delete_workflow == 'true'
      uses: small-5/delete-workflow-runs@main
      with:
        token: ${{ secrets.REPO_TOKEN }}
        repository: ${{ github.repository }}
        retain_min: ${{ inputs.RETAIN_MINUTE }}
    
    - name: 清理releases
      continue-on-error: true
      if: env.REPO_TOKEN  && github.event.inputs.Delete_releases == 'true'
      uses: ophub/delete-releases-workflows@main
      with:
        delete_releases: true
        releases_keep_keyword: targz
        releases_keep_latest: ${{ inputs.KEEP_LATEST }}
        delete_tags: true
        delete_workflows: false
        workflows_keep_day: 90
        gh_token: ${{ secrets.REPO_TOKEN }}
